// Generated by CoffeeScript 1.7.1
var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

define(['RNG'], function(RNG) {
  var RamsAndSheep;
  RamsAndSheep = (function() {
    var MAX_HIGH_SCORES;

    MAX_HIGH_SCORES = 5;

    function RamsAndSheep() {
      this._rng = new RNG();
      this._secretNumber = '';
    }

    RamsAndSheep.prototype.getGuesses = function() {
      return this._guesses;
    };

    RamsAndSheep.prototype.startGame = function() {
      this._secretNumber = this._rng.getSecretNumber();
      return this._guesses = 0;
    };

    RamsAndSheep.prototype.makeGuess = function(number) {
      this._guesses++;
      return this.countRamsAndSheep(number);
    };

    RamsAndSheep.prototype.isNumberValid = function(number) {
      var digit, i, _i, _len;
      number = number.toString();
      if (number.length !== 4) {
        return false;
      }
      if (number[0] === '0') {
        return false;
      }
      for (i = _i = 0, _len = number.length; _i < _len; i = ++_i) {
        digit = number[i];
        if (!/^\d$/.test(digit)) {
          return false;
        }
        if (number.indexOf(digit, i + 1) !== -1) {
          return false;
        }
      }
      return true;
    };

    RamsAndSheep.prototype.countRamsAndSheep = function(number) {
      var i, rams, sheep, _i, _ref;
      rams = 0;
      sheep = 0;
      for (i = _i = 0; _i <= 3; i = ++_i) {
        if (number[i] === this._secretNumber[i]) {
          rams++;
        } else if (_ref = number[i], __indexOf.call(this._secretNumber.split(''), _ref) >= 0) {
          sheep++;
        }
      }
      return {
        rams: rams,
        sheep: sheep
      };
    };

    RamsAndSheep.prototype.updateHighScores = function(result, highScores) {
      if (highScores == null) {
        highScores = [];
      }
      if (highScores.length < MAX_HIGH_SCORES) {
        highScores.push(result);
      }
      highScores.sort(function(a, b) {
        return b.score - a.score;
      });
      if (highScores.length === MAX_HIGH_SCORES && highScores[0].score > result.score) {
        highScores[0] = result;
      }
      return highScores.sort(function(a, b) {
        return a.score - b.score;
      });
    };

    return RamsAndSheep;

  })();
  return RamsAndSheep;
});

//# sourceMappingURL=rams-and-sheep.map
