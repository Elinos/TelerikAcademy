// Generated by CoffeeScript 1.7.1
define(['tech-store-models/item'], function(Item) {
  'use strict';
  var Store;
  Store = (function() {
    function Store(name) {
      var _ref;
      if ((6 <= (_ref = name.length) && _ref <= 30)) {
        this.name = name;
      } else {
        throw new Error("Incorect length of name!");
      }
      this._items = [];
    }

    Store.prototype._checkIfPartOfString = function(stringOne, stringTwo) {
      var strOneToLower, strTwoToLower;
      strOneToLower = stringOne.toLowerCase();
      strTwoToLower = stringTwo.toLowerCase();
      return (strOneToLower.indexOf(strTwoToLower)) >= 0;
    };

    Store.prototype._sortLex = function(prop) {
      return function(a, b) {
        return a[prop].localeCompare(b[prop]);
      };
    };

    Store.prototype._filterByType = function(typeOne, typeTwo) {
      var item, items, itemsByType;
      items = this._items.slice(0);
      if (typeTwo != null) {
        return itemsByType = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = items.length; _i < _len; _i++) {
            item = items[_i];
            if (item.type === typeOne || item.type === typeTwo) {
              _results.push(item);
            }
          }
          return _results;
        })();
      } else {
        return itemsByType = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = items.length; _i < _len; _i++) {
            item = items[_i];
            if (item.type === typeOne) {
              _results.push(item);
            }
          }
          return _results;
        })();
      }
    };

    Store.prototype.addItem = function(item) {
      if (!(item instanceof Item)) {
        throw new Error("You can add only items!");
      }
      this._items.push(item);
      return this;
    };

    Store.prototype.getAll = function() {
      var items;
      items = this._items.slice(0);
      return items.sort(this._sortLex('name'));
    };

    Store.prototype.getSmartPhones = function() {
      var onlySmartPhones;
      onlySmartPhones = this._filterByType('smart-phone');
      return onlySmartPhones.sort(this._sortLex('name'));
    };

    Store.prototype.getMobiles = function() {
      var onlyMobiles;
      onlyMobiles = this._filterByType('smart-phone', 'tablet');
      return onlyMobiles.sort(this._sortLex('name'));
    };

    Store.prototype.getComputers = function() {
      var onlyComputers;
      onlyComputers = this._filterByType('pc', 'notebook');
      return onlyComputers.sort(this._sortLex('name'));
    };

    Store.prototype.filterItemsByType = function(type) {
      var filteredByType;
      filteredByType = this._filterByType(type);
      return filteredByType.sort(this._sortLex('name'));
    };

    Store.prototype.filterItemsByPrice = function(options) {
      var item, items, itemsByPrice, max, min;
      if (options != null) {
        if (options.min != null) {
          min = options.min;
        } else {
          min = 0;
        }
        if (options.max != null) {
          max = options.max;
        } else {
          max = Number.POSITIVE_INFINITY;
        }
      } else {
        min = 0;
        max = Number.POSITIVE_INFINITY;
      }
      items = this._items.slice(0);
      itemsByPrice = (function() {
        var _i, _len, _ref, _results;
        _results = [];
        for (_i = 0, _len = items.length; _i < _len; _i++) {
          item = items[_i];
          if ((min <= (_ref = item.price) && _ref <= max)) {
            _results.push(item);
          }
        }
        return _results;
      })();
      return itemsByPrice.sort(function(itemOne, itemTwo) {
        return itemOne.price - itemTwo.price;
      });
    };

    Store.prototype.countItemsByType = function() {
      var countItemsByType, item, items, _i, _len;
      items = this._items.slice(0);
      countItemsByType = [];
      for (_i = 0, _len = items.length; _i < _len; _i++) {
        item = items[_i];
        if (countItemsByType[item.type]) {
          countItemsByType[item.type]++;
        } else {
          countItemsByType[item.type] = 1;
        }
      }
      return countItemsByType;
    };

    Store.prototype.filterItemsByName = function(partOfName) {
      var filteredByName, item, items;
      items = this._items.slice(0);
      filteredByName = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = items.length; _i < _len; _i++) {
          item = items[_i];
          if (this._checkIfPartOfString(item.name, partOfName)) {
            _results.push(item);
          }
        }
        return _results;
      }).call(this);
      return filteredByName.sort(this._sortLex('name'));
    };

    return Store;

  })();
  return Store;
});

//# sourceMappingURL=store.map
